name: Docker Image CI

on:
  push:
    branches:
      - "master"
      - "releases/**"
  pull_request:
    branches:
      - "master"
      - "releases/**"
  release:
    types: [ "published" ]
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true
        description: The version of Unbound to install
      push:
        type: boolean
        description: Push the image to a repository

env:
  IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/unbound-docker
  UNBOUND_VERSION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm/v7, linux/arm64]
        release: [bullseye, bookworm]
        include:
          - is_primary: false
            openssl_pkg: openssl-3.3.1
            openssl_opgp: EFC0A467D613CB83C7ED6D30D894E2CE8B3D79F5 7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 8657ABB260F056B1E5190839D9C4D26D0E604491 B7C1C14360F353A36862E4D5231C84CDDCC69C45 A21FAB74B0088AA361152586B8EF1A6BA9DA2D5C
          - platform: linux/amd64
            platform_args: --enable-dnstap --enable-subnet
            platform_pkgs: libprotobuf-c-dev protobuf-c-compiler
            openssl_platform_args: enable-ec_nistp_64_gcc_128
          - release: bookworm
            is_primary: true
        exclude:
          # Currently blocked by bug: 
          # https://askubuntu.com/questions/1339558/cant-build-dockerfile-for-arm64-due-to-libc-bin-segmentation-fault
          - platform: linux/arm/v7
            release: bookworm 
    runs-on: ubuntu-latest
    env:
      MATRIX_TAG: ${{ format('{0}-{1}', matrix.release, matrix.platform) }}
      PUSH_IMAGE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.push || startsWith(github.ref, 'refs/tags/') }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Normalize Matrix Tag
      run: |
        TAG_VAL=${{ env.MATRIX_TAG }}
        echo "MATRIX_TAG=${TAG_VAL//[^0-9A-Za-z\-\.]/-}" >> "$GITHUB_ENV"
    - name: Download Checksums
      run: |
        curl -L https://www.openssl.org/source/${{ matrix.openssl_pkg }}.tar.gz.sha256 -o openssl.tar.gz.sha256
        echo "OPENSSL_SHA256=$(cat openssl.tar.gz.sha256)" >> "$GITHUB_ENV"
        curl -L https://nlnetlabs.nl/downloads/unbound/unbound-${{ env.UNBOUND_VERSION }}.tar.gz.sha256 -o unbound.tar.gz.sha256
        echo "UNBOUND_SHA256=$(cat unbound.tar.gz.sha256)" >> "$GITHUB_ENV"
    - name: Build and Push the Image
      uses: docker/build-push-action@v6
      with:
        context: ./docker
        platforms: ${{ matrix.platform }}
        build-args: |
          OS_RELEASE=${{ matrix.release }}
          OPENSSL_PKG=${{ matrix.openssl_pkg }}
          OPENSSL_SHA256=${{ env.OPENSSL_SHA256 }}
          OPENSSL_OPGP=${{ matrix.openssl_opgp }}
          OPENSSL_PLATFORM_ARGS=${{ matrix.openssl_platform_args }}
          UNBOUND_VERSION=${{ env.UNBOUND_VERSION }}
          UNBOUND_SHA256=${{ env.UNBOUND_SHA256 }}
          UNBOUND_PLATFORM_ARGS=${{ matrix.platform_args }}
          UNBOUND_PLATFORM_PKGS=${{ matrix.platform_pkgs }}
        push: ${{ env.PUSH_IMAGE }}
        tags: |
          ${{ format('{0}:{1}', env.IMAGE_REPO, env.MATRIX_TAG) }}
    - name: Parse Version
      id: version
      if: ${{ env.PUSH_IMAGE }}
      run: |
        regex='([0-9]+)(\.([0-9]+))?(\.([0-9]+))?(-([0-9A-Za-z\-\.]+))?'
        if [[ "${{ env.UNBOUND_VERSION }}" =~ $regex ]]; then
          echo "major=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          echo "minor=${BASH_REMATCH[3]}" >> "$GITHUB_OUTPUT"
          echo "patch=${BASH_REMATCH[5]}" >> "$GITHUB_OUTPUT"
          echo "prerelease=${BASH_REMATCH[7]}" >> "$GITHUB_OUTPUT"
        fi
    - name: Add to Manifest
      if: ${{ env.PUSH_IMAGE }}
      env:
        TAG_ARGS: >-
          --tag ${{ format('{0}:{1}.{2}-{3}', env.IMAGE_REPO, steps.version.outputs.major, steps.version.outputs.minor, matrix.release) }}
          --tag ${{ format('{0}:{1}.{2}.{3}-{4}', env.IMAGE_REPO, steps.version.outputs.major, steps.version.outputs.minor, steps.version.outputs.patch, matrix.release) }}
      run: |
        docker buildx imagetools create --append ${{ format('{0}:{1}', env.IMAGE_REPO, env.MATRIX_TAG) }} ${{ env.TAG_ARGS }} || \
        docker buildx imagetools create ${{ format('{0}:{1}', env.IMAGE_REPO, env.MATRIX_TAG) }} ${{ env.TAG_ARGS }}
    - name: Add Primary to Manifest
      if: ${{ env.PUSH_IMAGE && matrix.is_primary }}
      env:
        TAG_ARGS: >-
          --tag ${{ format('{0}:{1}.{2}', env.IMAGE_REPO, steps.version.outputs.major, steps.version.outputs.minor) }}
          --tag ${{ format('{0}:{1}.{2}.{3}', env.IMAGE_REPO, steps.version.outputs.major, steps.version.outputs.minor, steps.version.outputs.patch) }}
      run: |
        docker buildx imagetools create --append ${{ format('{0}:{1}', env.IMAGE_REPO, env.MATRIX_TAG) }} ${{ env.TAG_ARGS }} || \
        docker buildx imagetools create ${{ format('{0}:{1}', env.IMAGE_REPO, env.MATRIX_TAG) }} ${{ env.TAG_ARGS }}
    - name: Cleanup Tags
      if: ${{ env.PUSH_IMAGE }}
      run: |
        token=$(curl -X POST -d "{ \"username\": \"${{ secrets.DOCKERHUB_USERNAME }}\", \"password\": \"${{ secrets.DOCKERHUB_TOKEN }}\" }" https://hub.docker.com/v2/users/login | jq -r '.token')
        curl -X DELETE -H "Authorization: Bearer $token" https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/unbound-docker/tags/${{ env.MATRIX_TAG }}
